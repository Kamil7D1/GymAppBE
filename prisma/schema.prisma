// schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             Int         @id @default(autoincrement())
  email          String      @unique
  password       String
  firstName      String
  lastName       String
  role           Role        @default(USER)
  membershipType Membership?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // Relacje do sesji treningowych
  conductedSessions TrainingSession[] @relation("TrainerSessions")
  bookedSessions    TrainingSession[] @relation("UserSessions")

  // Relacje do sesji cyklicznych
  conductedRecurringSessions    RecurringSession[] @relation("TrainerRecurringSessions")
  participatedRecurringSessions RecurringSession[] @relation("UserRecurringSessions")

  // Relacje do treningów personalnych
  conductedPersonalTrainings PersonalTraining[] @relation("TrainerPersonalTrainings")
  bookedPersonalTrainings    PersonalTraining[] @relation("ClientPersonalTrainings")

  // Pola dla trenerów
  pricePerSession Float?
  specialization  String?
  description     String?
  workoutPlans        WorkoutPlan[]
  createdWorkoutPlans WorkoutPlan[] @relation("TrainerWorkoutPlans")
  workoutTemplates WorkoutTemplate[] @relation("TrainerTemplates")
}

model TrainingSession {
  id              Int      @id @default(autoincrement())
  title           String
  date            DateTime
  startTime       String
  endTime         String
  maxParticipants Int
  isRecurring     Boolean  @default(false)
  trainerId       Int
  trainer         User     @relation("TrainerSessions", fields: [trainerId], references: [id])
  participants    User[]   @relation("UserSessions")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model RecurringSession {
  id              Int     @id @default(autoincrement())
  title           String
  dayOfWeek       Int
  startTime       String
  endTime         String
  maxParticipants Int
  trainerId       Int
  active          Boolean @default(true)
  trainer         User    @relation("TrainerRecurringSessions", fields: [trainerId], references: [id])
  participants    User[]  @relation("UserRecurringSessions")
}

model PersonalTraining {
  id        Int            @id @default(autoincrement())
  date      DateTime
  time      String
  message   String?
  status    TrainingStatus @default(PENDING)
  createdAt DateTime       @default(now())

  trainerId Int
  trainer   User @relation("TrainerPersonalTrainings", fields: [trainerId], references: [id])

  clientId Int
  client   User @relation("ClientPersonalTrainings", fields: [clientId], references: [id])
}

model Membership {
  id          Int       @id @default(autoincrement())
  userId      Int       @unique
  user        User      @relation(fields: [userId], references: [id])
  type        MembershipType
  startDate   DateTime  @default(now())
  endDate     DateTime
  price       Float
  status      MembershipStatus @default(ACTIVE)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model WorkoutPlan {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  trainerId   Int?
  trainer     User?     @relation("TrainerWorkoutPlans", fields: [trainerId], references: [id])
  exercises   Exercise[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Exercise {
  id            Int         @id @default(autoincrement())
  name          String
  sets          Int
  reps          Int
  weight        Float?
  notes         String?
  workoutPlanId Int
  workoutPlan   WorkoutPlan @relation(fields: [workoutPlanId], references: [id])
  orderIndex    Int         // Do sortowania ćwiczeń
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model WorkoutTemplate {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  trainerId   Int
  trainer     User      @relation("TrainerTemplates", fields: [trainerId], references: [id])
  exercises   TemplateExercise[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model TemplateExercise {
  id              Int             @id @default(autoincrement())
  name            String
  sets            Int
  reps            Int
  notes           String?
  orderIndex      Int
  templateId      Int
  template        WorkoutTemplate @relation(fields: [templateId], references: [id])
}

enum Role {
  USER
  ADMIN
  TRAINER
}

enum TrainingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum MembershipType {
  MONTHLY
  SEMI_ANNUAL
  ANNUAL
}

enum MembershipStatus {
  ACTIVE
  EXPIRED
  CANCELLED
}